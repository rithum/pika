#!/usr/bin/env node

/**
 * This script generates a list of available icons from installed Iconify packages
 * and creates a single file per collection to maximize tree-shaking.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path to the icons directory
const iconsDirPath = path.resolve(__dirname, '../../src/lib/icons');

// Ensure the icons directory exists
if (!fs.existsSync(iconsDirPath)) {
    fs.mkdirSync(iconsDirPath, { recursive: true });
}

// List of reserved keywords in JavaScript/TypeScript
const reservedKeywords = [
    'abstract',
    'arguments',
    'await',
    'boolean',
    'break',
    'byte',
    'case',
    'catch',
    'char',
    'class',
    'const',
    'continue',
    'debugger',
    'default',
    'delete',
    'do',
    'double',
    'else',
    'enum',
    'eval',
    'export',
    'extends',
    'false',
    'final',
    'finally',
    'float',
    'for',
    'function',
    'goto',
    'if',
    'implements',
    'import',
    'in',
    'instanceof',
    'int',
    'interface',
    'let',
    'long',
    'native',
    'new',
    'null',
    'package',
    'private',
    'protected',
    'public',
    'return',
    'short',
    'static',
    'super',
    'switch',
    'synchronized',
    'this',
    'throw',
    'throws',
    'transient',
    'true',
    'try',
    'typeof',
    'var',
    'void',
    'volatile',
    'while',
    'with',
    'yield',
];

// Function to get all icon names from a collection
function getIconNamesFromCollection(collectionName: string): string[] {
    try {
        const collectionPath = path.resolve(__dirname, `../../node_modules/@iconify-json/${collectionName}/icons.json`);

        if (!fs.existsSync(collectionPath)) {
            console.log(`Collection ${collectionName} not found at ${collectionPath}`);
            return [];
        }

        const collectionData = JSON.parse(fs.readFileSync(collectionPath, 'utf8'));
        // The icons are in the "icons" object of the JSON
        return Object.keys(collectionData.icons || {});
    } catch (error) {
        console.error(`Error reading collection ${collectionName}:`, error);
        return [];
    }
}

// Get all installed Iconify collections
function getInstalledCollections(): string[] {
    const nodeModulesPath = path.resolve(__dirname, '../../node_modules/@iconify-json');

    if (!fs.existsSync(nodeModulesPath)) {
        console.log('No @iconify-json packages found');
        return [];
    }

    // Filter out hidden files and directories
    return fs.readdirSync(nodeModulesPath).filter((item) => !item.startsWith('.'));
}

// Generate a safe variable name from an icon name
function getSafeVariableName(iconName: string): string {
    // Convert hyphenated names to Title Case
    let varName = iconName
        .split('-')
        .map((part) => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
        .join('');

    // Check if the variable name is a reserved keyword and add a prefix if needed
    if (reservedKeywords.includes(varName.toLowerCase())) {
        varName = `Icon${varName}`;
    }

    return varName;
}

// Generate the collection file content with all icons
function generateCollectionFileContent(collection: string, iconNames: string[]): string {
    const imports: string[] = [];
    const exports: string[] = [];

    iconNames.forEach((iconName) => {
        const safeVarName = getSafeVariableName(iconName);
        imports.push(`import ${safeVarName}Icon from '~icons/${collection}/${iconName}';`);
        exports.push(`export const ${safeVarName} = ${safeVarName}Icon;`);
    });

    return `// ${collection} icons
// Auto-generated by tools/generate-icon-list.ts

${imports.join('\n')}

${exports.join('\n')}
`;
}

// Main function
function main(): void {
    const collections = getInstalledCollections();

    if (collections.length === 0) {
        console.log('No Iconify collections found. Please install some with:');
        console.log('npm install -D @iconify-json/lucide @iconify-json/fa @iconify-json/mdi');
        return;
    }

    console.log(`Found ${collections.length} Iconify collections: ${collections.join(', ')}`);

    collections.forEach((collection) => {
        const iconNames = getIconNamesFromCollection(collection);
        console.log(`Found ${iconNames.length} icons in ${collection}`);

        if (iconNames.length > 0) {
            // Create the collection directory
            const collectionDirPath = path.resolve(iconsDirPath, collection);
            if (!fs.existsSync(collectionDirPath)) {
                fs.mkdirSync(collectionDirPath, { recursive: true });
            }

            // Generate a single file for the collection
            const collectionFilePath = path.resolve(collectionDirPath, 'index.ts');
            const content = generateCollectionFileContent(collection, iconNames);
            fs.writeFileSync(collectionFilePath, content);
            console.log(`Created ${collectionFilePath}`);
        }
    });

    console.log('Icon files generation complete!');
}

main();
