<script lang="ts">
    import { cn } from '$lib/utils.js';
    import type { WithElementRef } from 'bits-ui';
    import type { HTMLAttributes } from 'svelte/elements';
    import { useSlideout } from './context.svelte.js';

    let {
        ref = $bindable(null),
        class: className,
        children,
        ...restProps
    }: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> = $props();

    const slideout = useSlideout();

    // Add resize support alongside toggle
    let isDragging = $state(false);
    let startX = $state(0);

    function handleDragStart(e: MouseEvent) {
        isDragging = true;
        startX = e.clientX;

        window.addEventListener('mousemove', handleDragMove);
        window.addEventListener('mouseup', handleDragEnd);

        document.body.style.userSelect = 'none';
        e.preventDefault();
    }

    function handleDragMove(e: MouseEvent) {
        if (!isDragging) return;
        // Implement drag resize logic here
        // This should communicate with the panel component
    }

    function handleDragEnd() {
        isDragging = false;
        window.removeEventListener('mousemove', handleDragMove);
        window.removeEventListener('mouseup', handleDragEnd);
        document.body.style.userSelect = '';
    }

    function cleanup() {
        window.removeEventListener('mousemove', handleDragMove);
        window.removeEventListener('mouseup', handleDragEnd);
    }
</script>

<svelte:window on:beforeunload={cleanup} />

<button
    bind:this={ref}
    data-slideout="rail"
    aria-label="Toggle Slideout"
    tabIndex={-1}
    onclick={() => slideout.toggle()}
    onmousedown={handleDragStart}
    title="Toggle Slideout"
    class={cn(
        'hover:after:bg-gray-300 absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex',
        '[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize',
        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
        className
    )}
    {...restProps}
>
    {@render children?.()}
</button>
